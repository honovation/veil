#!/bin/bash

if [[ $1 == :* ]] ; then
    COLON_VEIL_SERVER_NAME=$1
    shift
    export VEIL_SERVER_NAME=${COLON_VEIL_SERVER_NAME:1}
else
    if [ -z "$VEIL_SERVER_NAME" ] ; then
        export VEIL_SERVER_NAME=development
    fi
fi

if [[ "$VEIL_SERVER_NAME" == "development" || "$VEIL_SERVER_NAME" == "test" ]] ; then
    export PYTHONDONTWRITEBYTECODE=True
fi

if [ -z "$VEIL_HOME" ] ; then
    export VEIL_HOME=$(pwd)
fi
if [ ! -d $VEIL_HOME/env/bin ] ; then
    if [[ ("$1" != "deploy") && ("$1" != "scaffold") && ("$1" != "init") ]] ; then
        echo "VEIL_HOME is invalid"
        exit 1
    fi
fi
if [ -z `readlink $0` ] ; then
    BIN_DIR=$(cd `dirname $0` && pwd)
else
    BIN_DIR=$(dirname $(readlink $0))
fi
export VEIL_FRAMEWORK_HOME=$(dirname $BIN_DIR)

if [ -f $VEIL_HOME/env/bin/activate ] ; then
    source $VEIL_HOME/env/bin/activate
fi

function veil_init {
    find $VEIL_FRAMEWORK_HOME -type f -name "*.pyc" -delete
    find $VEIL_HOME -type f -name "*.pyc" -delete
    if [ ! -f /usr/bin/veil ]; then
        sudo ln -sf $VEIL_FRAMEWORK_HOME/bin/veil /usr/bin/veil
    fi
    if [ ! -f $VEIL_HOME/env/.initialized ]; then
        if [[ "$VEIL_SERVER_NAME" == "development" || "$VEIL_SERVER_NAME" == "test" ]] ; then
            sudo apt -y install unzip wget python python-dev python-pip python-virtualenv
            SHARE_DIR=/opt/share
            if [ ! -d $SHARE_DIR ]; then
                sudo mkdir -m 0755 $SHARE_DIR
                sudo chown -R $USER:$USER $SHARE_DIR
            fi
            DEPENDENCY_DIR=$SHARE_DIR/dependency
            if [ ! -d $DEPENDENCY_DIR ]; then
                mkdir -m 0755 $DEPENDENCY_DIR
            fi
            DEPENDENCY_INSTALL_DIR=$SHARE_DIR/dependency-install
            if [ ! -d $DEPENDENCY_INSTALL_DIR ]; then
                mkdir -m 0755 $DEPENDENCY_INSTALL_DIR
            fi
            PYPI_ARCHIVE_DIR=$SHARE_DIR/pypi
            if [ ! -d $PYPI_ARCHIVE_DIR ]; then
                mkdir -m 0755 $PYPI_ARCHIVE_DIR
            fi
            # upgrade before initializing veil app (veil init) which will create virtualenv and copy pip&wheel into virtual env.
            PYPI_INDEX_URL='https://pypi.doubanio.com/simple/'
            sudo -H pip install -i $PYPI_INDEX_URL --upgrade "pip>=9.0.1"
            sudo -H pip install -i $PYPI_INDEX_URL --upgrade "setuptools>=34.2.0"
            sudo -H pip install -i $PYPI_INDEX_URL --upgrade "wheel>=0.30.0a0"
            sudo -H pip install -i $PYPI_INDEX_URL --upgrade "virtualenv>=15.1.0"
        fi
        virtualenv env
        echo "$VEIL_FRAMEWORK_HOME/src" > env/lib/python2.7/site-packages/veil.pth
        echo "$VEIL_HOME/src" >> env/lib/python2.7/site-packages/veil.pth
        source $VEIL_HOME/env/bin/activate
        touch $VEIL_HOME/env/.initialized
    fi
    if [ ! -f $VEIL_HOME/.git/hooks/pre-commit ]; then
        git config core.quotepath false
        ln -sf $VEIL_FRAMEWORK_HOME/src/discipline_coach.py $VEIL_HOME/.git/hooks/pre-commit
        echo "Note: a git pre-commit script has linked to .git/hooks, if you don't need it, delete it manually"
    fi
}

function veil_scaffold {
    if [[ "$(pwd)" == "$VEIL_FRAMEWORK_HOME" ]] ; then
        echo "please do not run veil scaffold under $VEIL_FRAMEWORK_HOME"
        exit 1
    fi
    if [[ "$VEIL_SERVER_NAME" != "development" ]] ; then
        echo "veil scaffold is only supported under development environment"
        exit 1
    fi
    STARTER_PROJECT="$1"
    if [[ "$STARTER_PROJECT" == "" ]] ; then
        echo "please specify veil app name"
        exit 1
    fi
    if [ -d $STARTER_PROJECT ] ; then
        echo "$STARTER_PROJECT already exists under the current path"
        exit 1
    fi
    cp -rd $VEIL_FRAMEWORK_HOME/starter/vsee ./$STARTER_PROJECT
    mv ./$STARTER_PROJECT/db/vsee ./$STARTER_PROJECT/db/$STARTER_PROJECT
    mv ./$STARTER_PROJECT/src/vsee ./$STARTER_PROJECT/src/$STARTER_PROJECT
    grep -i "vsee" -r ./$STARTER_PROJECT | awk -F : '{print $1}' | sort | uniq | xargs sed -i "s/vsee/${STARTER_PROJECT}/g"
    cd $STARTER_PROJECT
    git init
    git add -A .
    git commit -m 'starter'
    echo "Note: created $STARTER_PROJECT, please follow instructions in README.md to develop your veil application"
}

case "$1" in
    execute)
        shift
        exec $@
        ;;
    sleep)
        shift
        sleep $1
        shift
        exec $@
        ;;
    tunnel-to)
        shift
        sudo veil install veil_installer.component_resource?veil.environment.tunnel
        exec veil environment tunnel tunnel-up $@
        ;;
    up)
        shift
        find $VEIL_FRAMEWORK_HOME -type f -name "*.pyc" -delete
        find $VEIL_HOME -type f -name "*.pyc" -delete
        exec veil server supervisor up $@
        ;;
    down)
        exec veil server supervisor down
        ;;
    install)
        shift
        exec python -m veil_installer $@
        ;;
    install-server)
        shift
        exec python -m veil_installer veil.server.in_service.veil_server_resource $@
        ;;
    deploy-env)
        shift
        sudo veil install veil_installer.component_resource?veil.environment.in_service
        exec veil environment in-service deploy-env $@
        ;;
    deploy-monitor)
        shift
        sudo veil install veil_installer.component_resource?veil.environment.in_service
        exec veil environment in-service deploy-monitor $@
        ;;
    deploy-guard)
        shift
        sudo veil install veil_installer.component_resource?veil.environment.in_service
        exec veil environment in-service deploy-guard $@
        ;;
    deploy-barman)
        shift
        sudo veil install veil_installer.component_resource?veil.environment.in_service
        exec veil environment in-service deploy-barman $@
        ;;
    deploy-server)
        shift
        sudo veil install veil_installer.component_resource?veil.environment.in_service
        exec veil environment in-service deploy-server $@
        ;;
    patch-env)
        shift
        sudo veil install veil_installer.component_resource?veil.environment.in_service
        exec veil environment in-service patch-env $@
        ;;
    rollback-env)
        shift
        exec veil environment in-service rollback-env $@
        ;;
    stop-env)
        shift
        exec veil environment in-service stop-env $@
        ;;
    start-env)
        shift
        exec veil environment in-service start-env $@
        ;;
    restart-env)
        shift
        exec veil environment in-service restart-env $@
        ;;
    enable-env-external-access)
        shift
        exec veil environment in-service enable-env-external-access $@
        ;;
    disable-env-external-access)
        shift
        exec veil environment in-service disable-env-external-access $@
        ;;
    backup-env)
        shift
        exec veil environment in-service backup-env $@
        ;;
    upgrade-env-pip)
        shift
        exec veil environment in-service upgrade-env-pip $@
        ;;
    scaffold)
        shift
        veil_scaffold $1
        ;;
    init)
        shift
        veil_init
        ;;
    upgrade-pip)
        shift
        exec veil server python upgrade-pip $@
        ;;
    deploy)
        shift
        veil_init
        exec veil server in-service deploy $@
        ;;
    patch)
        shift
        exec veil server in-service patch $@
        ;;
    backup-host)
        shift
        exec veil environment backup create-host-backup $@
        ;;
    migrate)
        exec veil server in-service migrate
        ;;
    pull)
        exec veil development git pull
        ;;
    self-check)
        shift
        exec veil :test development self-checker self-check $@
        ;;
    quick-check)
        shift
        exec veil :test development self-checker quick-check $@
        ;;
    *)
        exec python -m veil "$@"
esac